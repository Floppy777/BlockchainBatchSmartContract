package blockchain.batch.smartcontract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>, or {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.3.1.
 */
public final class ProjectSmartContract extends Contract {
    private static final String BINARY = "6060604052608060405190810160405280604381526020017f6a736f6e2868747470733a2f2f7777772e746865726f636b74726164696e672e81526020017f636f6d2f6170692f7469636b65722f455448455552292e726573756c742e302e81526020017f626964000000000000000000000000000000000000000000000000000000000081525060079080516200009c92916020019062000106565b5060405160408062001d4a83398101604052808051919060200180516000600c819055600955670de0b6b3a764000002600855505060058054600160a060020a03191633600160a060020a031617905562015180024201600b55600e805460ff19169055620001ab565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014957805160ff191683800117855562000179565b8280016001018555821562000179579182015b82811115620001795782518255916020019190600101906200015c565b50620001879291506200018b565b5090565b620001a891905b8082111562000187576000815560010162000192565b90565b611b8f80620001bb6000396000f3006060604052600436106101035763ffffffff60e060020a60003504166307ab6bd3811461010857806313156a09146101dd57806317e334d2146102025780631dc7cb9d14610215578063227e327d146102665780632552d77d14610285578063263f5989146102a4578063264c5b7a146102b757806327dc297e146102d657806338bbfa501461032c57806338e771ab146103c45780634a104874146103d75780634fa7353c1461046d5780638a5294991461048c5780638b7ac4041461049f578063a2f8182e146104b2578063ab86496c146104d1578063b08602d9146104f0578063b135648814610503578063e245daf214610516578063f7b6f65014610529575b600080fd5b6101db60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061053c95505050505050565b005b34156101e857600080fd5b6101f0610809565b60405190815260200160405180910390f35b341561020d57600080fd5b6101f0610829565b341561022057600080fd5b6101db60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061082f95505050505050565b341561027157600080fd5b6101db600160a060020a0360043516610861565b341561029057600080fd5b6101db600160a060020a036004351661089a565b34156102af57600080fd5b6101f06108fb565b34156102c257600080fd5b6101f0600160a060020a036004351661091a565b34156102e157600080fd5b6101db600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061095795505050505050565b341561033757600080fd5b6101db600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610d7295505050505050565b34156103cf57600080fd5b6101db610d77565b34156103e257600080fd5b6103f6600160a060020a0360043516610e36565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561043257808201518382015260200161041a565b50505050905090810190601f16801561045f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047857600080fd5b6103f6600160a060020a0360043516610f24565b341561049757600080fd5b6101f0610fdb565b34156104aa57600080fd5b6101f0610fe1565b34156104bd57600080fd5b6103f6600160a060020a0360043516610fe7565b34156104dc57600080fd5b6101db600160a060020a036004351661109e565b34156104fb57600080fd5b6101f06110d7565b341561050e57600080fd5b6101f06110dd565b341561052157600080fd5b6101f06110e3565b341561053457600080fd5b6101f06110e9565b600080600e5460ff16600281111561055057fe5b1461055a57600080fd5b600160a060020a03331660009081526015602052604090206003015460ff1615156001141561058857600080fd5b600b54421115610638575060005b6016548110156106335760168054829081106105ae57fe5b600091825260208220015460168054600160a060020a03909216926108fc9260159290869081106105db57fe5b6000918252602080832090910154600160a060020a031683528201929092526040908101909120600101548015909202919051600060405180830381858888f19350505050151561062b57600080fd5b600101610596565b610802565b6321dae501834203101561064b57600080fd5b60606040519081016040528060806040519081016040528088815260200187815260200186815260200185815250815260200134815260200133600160a060020a0316815250600f6000820151818151819080516106ad9291602001906119d1565b506020820151816001019080516106c89291602001906119d1565b50604082015181600201556060820151816003019080516106ed9291602001906119d1565b5050506020820151816004015560408201516005919091018054600160a060020a031916600160a060020a03909216919091179055506108006040805190810160405280600381526020017f55524c000000000000000000000000000000000000000000000000000000000081525060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107f25780601f106107c7576101008083540402835291602001916107f2565b820191906000526020600020905b8154815290600101906020018083116107d557829003601f168201915b50505050506207a120611105565b505b5050505050565b600160a060020a0333166000908152601560205260409020600201545b90565b60095490565b60065433600160a060020a0390811691161461084a57600080fd5b600781805161085d9291602001906119d1565b5050565b60065433600160a060020a0390811691161461087c57600080fd5b5060068054600160a060020a03191633600160a060020a0316179055565b60065433600160a060020a039081169116146108b557600080fd5b600160a060020a038116600081815260156020526040908190206001015480156108fc029151600060405180830381858888f1935050505015156108f857600080fd5b50565b600160a060020a03331660009081526015602052604090206001015490565b60065460009033600160a060020a0390811691161461093857600080fd5b50600160a060020a031660009081526015602052604090206006015490565b60008060008060008060008061096c8961148b565b600d819055601354601454600160a060020a0316600081815260156020526040902060018101546002909101549083019b50670de0b6b3a764000093830293909304928301995091975095506109c19061149e565b6105dc871115610ac7576105dc87039350600d54848115156109df57fe5b600d54601454600160a060020a031660009081526015602052604090206002015492909104670de0b6b3a76400009081029550868903945090916105dc0302811515610a2757fe5b60148054600160a060020a03908116600090815260156020526040808220600190810180549790960496870190955583548316825280822060020180548901905583548316825290819020600301805460ff1916909417909355600a80548701905560098054850190559054929350919091169084156108fc0290859051600060405180830381858888f193505050501515610ac257600080fd5b610bc0565b60138054601454600160a060020a0316600090815260156020526040902060010180549091019055600d549054670de0b6b3a7640000910260148054600160a060020a03908116600090815260156020526040808220600201805496909504909501909355905416815220600801805460018101610b458382611a4f565b9160005260206000209060030201600060606040519081016040908152601354808352600d54908102602084015290820152919050815181556020820151816001015560408201516002909101555050600d54601354670de0b6b3a76400009102600a80549290910490910190556013546009805490910190555b600c8054600190810190915560148054600160a060020a039081166000908152601560205260408082208054860190559254909116815220600f80549092600490920191610c24918391859160026000199282161561010002929092011604611a7b565b5060018201816001019080546001816001161561010002031660029004610c4c929190611a7b565b506002820154816002015560038201816003019080546001816001161561010002031660029004610c7e929190611a7b565b5050600854600954109050610d66576008546009541115610cd657601454600854600954600160a060020a03909216910380156108fc0290604051600060405180830381858888f193505050501515610cd657600080fd5b600554600854600160a060020a0390911690606460609091020480156108fc0290604051600060405180830381858888f193505050501515610d1757600080fd5b600654600854600160a060020a0390911690606460049091020480156108fc0290604051600060405180830381858888f193505050501515610d5857600080fd5b600e805460ff191660011790555b50505050505050505050565b505050565b60055460009033600160a060020a03908116911614610d9557600080fd5b5060005b6016548110156108f8576016805482908110610db157fe5b600091825260208220015460168054600160a060020a03909216926108fc926015929086908110610dde57fe5b6000918252602080832090910154600160a060020a031683528201929092526040908101909120600101548015909202919051600060405180830381858888f193505050501515610e2e57600080fd5b600101610d99565b610e3e611af0565b60065433600160a060020a03908116911614610e5957600080fd5b6015600083600160a060020a0316600160a060020a031681526020019081526020016000206004016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f185780601f10610eed57610100808354040283529160200191610f18565b820191906000526020600020905b815481529060010190602001808311610efb57829003601f168201915b50505050509050919050565b610f2c611af0565b60065433600160a060020a03908116911614610f4757600080fd5b6015600083600160a060020a0316600160a060020a031681526020019081526020016000206004016003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f185780601f10610eed57610100808354040283529160200191610f18565b60085490565b600d5490565b610fef611af0565b60065433600160a060020a0390811691161461100a57600080fd5b6015600083600160a060020a0316600160a060020a031681526020019081526020016000206004016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f185780601f10610eed57610100808354040283529160200191610f18565b60055433600160a060020a039081169116146110b957600080fd5b5060058054600160a060020a03191633600160a060020a0316179055565b600a5490565b600b5490565b600c5490565b600160a060020a03331660009081526015602052604090205490565b600080548190600160a060020a03161580611132575060005461113090600160a060020a0316611522565b155b15611143576111416000611526565b505b60008054600160a060020a0316906338cc483190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561118c57600080fd5b6102c65a03f1151561119d57600080fd5b5050506040518051600154600160a060020a0390811691161490506112405760008054600160a060020a0316906338cc483190604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561120557600080fd5b6102c65a03f1151561121657600080fd5b505050604051805160018054600160a060020a031916600160a060020a0392909216919091179055505b600154600160a060020a0316632ef3accc86856000604051602001526040518363ffffffff1660e060020a0281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156112b1578082015183820152602001611299565b50505050905090810190601f1680156112de5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15156112fd57600080fd5b6102c65a03f1151561130e57600080fd5b5050506040518051915050670de0b6b3a76400003a8402018111156113365760009150611483565b600154600160a060020a031663c51be90f82600088888883604051602001526040518663ffffffff1660e060020a028152600401808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156113b457808201518382015260200161139c565b50505050905090810190601f1680156113e15780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156114175780820151838201526020016113ff565b50505050905090810190601f1680156114445780820380516001836020036101000a031916815260200191505b5096505050505050506020604051808303818588803b151561146557600080fd5b6125ee5a03f1151561147657600080fd5b5050505060405180519250505b509392505050565b6000611498826000611530565b92915050565b60005b6016548110156114e55760168054829081106114b957fe5b600091825260209091200154600160a060020a03838116911614156114dd5761085d565b6001016114a1565b60168054600181016114f78382611b02565b5060009182526020909120018054600160a060020a038416600160a060020a03199091161790555050565b3b90565b600061149861169e565b600061153a611af0565b5082600080805b8351811015611681577f300000000000000000000000000000000000000000000000000000000000000084828151811061157757fe5b016020015160f860020a900460f860020a02600160f860020a031916101580156115e857507f39000000000000000000000000000000000000000000000000000000000000008482815181106115c957fe5b016020015160f860020a900460f860020a02600160f860020a03191611155b1561163e578115611607578515156115ff57611681565b600019909501945b600a83029250603084828151811061161b57fe5b016020015160f860020a900460f860020a0260f860020a90040383019250611679565b83818151811061164a57fe5b016020015160f860020a900460f860020a02600160f860020a031916602e60f860020a02141561167957600191505b600101611541565b60008611156116935785600a0a830292505b509095945050505050565b6000806116be731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed611522565b111561172e5760008054600160a060020a031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905561172660408051908101604052600b81527f6574685f6d61696e6e657400000000000000000000000000000000000000000060208201526119c2565b506001610826565b600061174d73c03a2615d5efaf5f49f60b7bb6583eaec212fdf1611522565b11156117b55760008054600160a060020a03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905561172660408051908101604052600c81527f6574685f726f707374656e33000000000000000000000000000000000000000060208201526119c2565b60006117d473b7a07bcf2ba2f2703b24c0691b5278999c59ac7e611522565b111561183c5760008054600160a060020a03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905561172660408051908101604052600981527f6574685f6b6f76616e000000000000000000000000000000000000000000000060208201526119c2565b600061185b73146500cfd35b22e4a392fe0adc06de1a1368ed48611522565b11156118c35760008054600160a060020a03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905561172660408051908101604052600b81527f6574685f72696e6b65627900000000000000000000000000000000000000000060208201526119c2565b60006118e2736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475611522565b1115611916575060008054600160a060020a031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb4751790556001610826565b60006119357320e12a1f859b3feae5fb2a0a32c18f5a65555bbf611522565b1115611969575060008054600160a060020a0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf1790556001610826565b60006119887351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa611522565b11156119bc575060008054600160a060020a0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa1790556001610826565b50600090565b600281805161085d9291602001905b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a1257805160ff1916838001178555611a3f565b82800160010185558215611a3f579182015b82811115611a3f578251825591602001919060010190611a24565b50611a4b929150611b22565b5090565b815481835581811511610d7257600302816003028360005260206000209182019101610d729190611b3c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ab45780548555611a3f565b82800160010185558215611a3f57600052602060002091601f016020900482015b82811115611a3f578254825591600101919060010190611ad5565b60206040519081016040526000815290565b815481835581811511610d7257600083815260209020610d729181019083015b61082691905b80821115611a4b5760008155600101611b28565b61082691905b80821115611a4b576000808255600182018190556002820155600301611b425600a165627a7a723058202fa736fe01dc84dde0dcadd442f936581945cc74ebc223ce17d67897449c65e00029";

    private ProjectSmartContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ProjectSmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> depositMoneyToSmartContract(Utf8String nom, Utf8String prenom, Uint256 dateNaissance, Utf8String email, BigInteger weiValue) {
        Function function = new Function("depositMoneyToSmartContract", Arrays.<Type>asList(nom, prenom, dateNaissance, email), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function, weiValue);
    }

    public Future<Uint256> getAmountDonationEuro() {
        Function function = new Function("getAmountDonationEuro", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getAmountEther() {
        Function function = new Function("getAmountEther", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> updateUrlOracle(Utf8String url) {
        Function function = new Function("updateUrlOracle", Arrays.<Type>asList(url), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> updateCompanyAddress(Address addr) {
        Function function = new Function("updateCompanyAddress", Arrays.<Type>asList(addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> refundOne(Address addr) {
        Function function = new Function("refundOne", Arrays.<Type>asList(addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> getAmountDonationEther() {
        Function function = new Function("getAmountDonationEther", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getBirthdate(Address addr) {
        Function function = new Function("getBirthdate", 
                Arrays.<Type>asList(addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> __callback(Bytes32 myid, Utf8String result) {
        Function function = new Function("__callback", Arrays.<Type>asList(myid, result), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> __callback(Bytes32 myid, Utf8String result, DynamicBytes proof) {
        Function function = new Function("__callback", Arrays.<Type>asList(myid, result, proof), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> refundAll() {
        Function function = new Function("refundAll", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> getFirstname(Address addr) {
        Function function = new Function("getFirstname", 
                Arrays.<Type>asList(addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getEmail(Address addr) {
        Function function = new Function("getEmail", 
                Arrays.<Type>asList(addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getAmountWanted() {
        Function function = new Function("getAmountWanted", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getCurrentChange() {
        Function function = new Function("getCurrentChange", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getLastname(Address addr) {
        Function function = new Function("getLastname", 
                Arrays.<Type>asList(addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> updateOwnerAddress(Address addr) {
        Function function = new Function("updateOwnerAddress", Arrays.<Type>asList(addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> getAmoutEuro() {
        Function function = new Function("getAmoutEuro", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getEndDate() {
        Function function = new Function("getEndDate", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getNbDonationTotal() {
        Function function = new Function("getNbDonationTotal", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getNbDonation() {
        Function function = new Function("getNbDonation", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<ProjectSmartContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Uint256 duration, Uint256 amountWanted) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(duration, amountWanted));
        return deployAsync(ProjectSmartContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<ProjectSmartContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Uint256 duration, Uint256 amountWanted) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(duration, amountWanted));
        return deployAsync(ProjectSmartContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static ProjectSmartContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProjectSmartContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ProjectSmartContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProjectSmartContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
